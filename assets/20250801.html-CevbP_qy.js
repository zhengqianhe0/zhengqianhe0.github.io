import{_ as n,c as s,a,o as i}from"./app-CtcNptRb.js";const l={};function t(r,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="_118-杨辉三角" tabindex="-1"><a class="header-anchor" href="#_118-杨辉三角"><span><a href="https://leetcode.cn/problems/pascals-triangle/" target="_blank" rel="noopener noreferrer">118. 杨辉三角</a></span></a></h1><p>给定一个非负整数 *<code>numRows</code>，*生成「杨辉三角」的前 <em><code>numRows</code></em> 行。</p><p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p><p><img src="https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif" alt="img"></p><p><strong>示例 1:</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入: numRows = 5</span>
<span class="line">输出: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入: numRows = 1</span>
<span class="line">输出: [[1]]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= numRows &lt;= 30</code></li></ul><h1 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h1><p>模拟杨辉三角的生成过程。</p><p>使用resize函数设置vector的大小，同样也可以设置第二个参数1直接初始化。当然按照定义只初始化头尾两个元素也可以。</p><p>按顺序计算，左侧对齐，得到递推式。</p><p>包含动态规划思想。</p><p><strong>复杂度分析：</strong></p><ul><li>时间复杂度：<em>O</em>(<em>n²</em>)，二位数组遍历。</li><li>空间复杂度：<em>O</em>(1)。</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">class Solution {</span>
<span class="line">public:</span>
<span class="line">    vector&lt;vector&lt;int&gt;&gt; generate(int numRows) {</span>
<span class="line">        vector&lt;vector&lt;int&gt;&gt; ans(numRows);</span>
<span class="line">        for(int i=0;i&lt;numRows;i++){</span>
<span class="line">            ans[i].resize(i+1);</span>
<span class="line">            ans[i][0]=ans[i][i]=1;</span>
<span class="line">            for(int j=1;j&lt;i;j++){</span>
<span class="line">                ans[i][j]=ans[i-1][j]+ans[i-1][j-1];</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">        return ans;</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18)]))}const d=n(l,[["render",t]]),p=JSON.parse('{"path":"/leetcode/20250801.html","title":"118. 杨辉三角","lang":"zh-CN","frontmatter":{"date":"2025-08-01T00:00:00.000Z","category":["LeetCode每日一题"],"tag":["位运算","数组","数学"]},"headers":[],"git":{"updatedTime":1757033208000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":2,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"74ad287b3313cc2928def8d57bf83e6110f9aa4d","time":1757033208000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"整理分类"},{"hash":"e93bdeec18b537d149762e0270739a4be4c5f69c","time":1754015951000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"leetcode/20250801.md","excerpt":"\\n<p>给定一个非负整数 *<code>numRows</code>，*生成「杨辉三角」的前 <em><code>numRows</code></em> 行。</p>\\n<p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p>\\n<p><img src=\\"https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif\\" alt=\\"img\\"></p>\\n<p><strong>示例 1:</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"text\\"><pre><code><span class=\\"line\\">输入: numRows = 5</span>\\n<span class=\\"line\\">输出: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]</span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{d as comp,p as data};
