import{_ as l,c as n,a as i,o as a}from"./app-CtcNptRb.js";const s={};function t(o,e){return a(),n("div",null,e[0]||(e[0]=[i(`<h1 id="cortex项目学习" tabindex="-1"><a class="header-anchor" href="#cortex项目学习"><span>Cortex项目学习</span></a></h1><h2 id="_1-配置与启动" tabindex="-1"><a class="header-anchor" href="#_1-配置与启动"><span>1 配置与启动</span></a></h2><p>从modelscope下载训练好的模型。</p><p>Model: Cotex-0.6B-A0.2B</p><p>后端技术点：Bottle服务，模型加载</p><p>大模型技术点：微调</p><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h2><h3 id="a-前端技术点" tabindex="-1"><a class="header-anchor" href="#a-前端技术点"><span>A 前端技术点</span></a></h3><ul><li><p>样式</p><ul><li><p>tailwind css 用于快速构建响应式布局</p></li><li><p>其他通过cdn引入的前端辅助库：google font，KaTeX，marked.js，highlight.js</p></li><li><p>style段（css）既有自定义的样式类，也有对其他js库的覆盖样式</p></li></ul></li><li><p>前后端交互</p><ul><li>fetch api发送post请求到后端 <ul><li>框架下使用axios封装成api对象，进行响应与请求的拦截</li></ul></li><li>使用SSE处理流式响应</li></ul></li><li><p>页面交互</p><ul><li>表单交互<code>&lt;form id=&quot;chat-form&quot;&gt;</code>和输入控件<code>&lt;textarea&gt;、&lt;input type=&quot;range&quot;&gt;</code>。</li><li>自定义样式，如滚动条，动画，过渡</li></ul></li><li><p>JavaScript ES6</p><ul><li>DOM操作（document.addEventListener, getElementById）</li><li>异步编程 async await</li><li>html模板字符串 insertAdjacentHTML与innerHTML</li></ul></li></ul><h3 id="b-网络相关的现象" tabindex="-1"><a class="header-anchor" href="#b-网络相关的现象"><span>B 网络相关的现象</span></a></h3><p>服务运行在linux服务器上。启动时需注意：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line"># 0.0.0.0表示允许外部任何ip访问，127.0.0.1表示只允许本机ip访问，但不限制ssh转发</span>
<span class="line">$ netstat -tuln | grep 8081</span>
<span class="line">tcp        0      0 0.0.0.0:8081            0.0.0.0:*               LISTEN  </span>
<span class="line"></span>
<span class="line"># 判断防火墙是否启动，未启动则不会对外部ip进行限制</span>
<span class="line">$ sudo ufw status</span>
<span class="line">Status: inactive</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在windows主机运行如下命令，判断8080端口是否被占用。当启动后，该端口默认开始转发。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">netstat -an | findstr 127.0.0.1:8080</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>浏览器无法直接访问，因为没有像ssh一样强制配置流量走代理。</p><p>打开TUN模式后即可直接通过ip+端口访问服务器上的内容。</p><ul><li><strong>TUN模式</strong>：通过虚拟网卡接管系统级接管所有流量（包括浏览器、系统进程等），无需手动给应用配代理。</li><li><strong>规则模式</strong>：按预设规则（IP / 域名等）分流，匹配规则的走代理，否则直连。</li><li><strong>全局模式</strong>：所有流量强制走代理。</li><li><strong>直连模式</strong>：所有流量不经过代理，直接连接目标。</li></ul><p>为什么clash+脚本能够访问内网服务器？</p><ul><li><p>脚本的配置</p><ul><li><strong>第一步：定义内网专用代理节点（prependProxyies）</strong> 脚本添加了 <code>BISTU-CETC</code> 这个 SS 代理节点，其服务器地址 <code>alzjk.jp.bistucetc.com</code> 和端口、密码等信息。</li><li><strong>第二步：创建代理分组（prependProxyGroups）</strong> 脚本创建 <code>BISTU</code> 分组，类型为 “select”，仅包含 <code>BISTU-CETC</code> 和 <code>REJECT</code>（拒绝）两个选项。所有匹配该分组的流量，只会走 <code>BISTU-CETC</code> 代理（或被拒绝），确保内网流量 “专用专走”。</li><li><strong>第三步：绑定 IP 与代理分组（prependRules）</strong> 脚本添加规则 <code>IP-CIDR,10.146.58.232/32,BISTU</code>，核心作用是： <strong>“所有访问 10.146.58.232（你的内网服务器 IP）的流量，强制路由到 BISTU 分组，即通过 BISTU-CETC 代理节点转发”</strong>。</li></ul></li><li><p>具体访问时的流程</p><ul><li><strong>流量触发规则匹配</strong> 无论你是通过浏览器直接访问，还是通过 SSH 隧道转发（VSCode 的端口转发），只要流量目标是 <code>10.146.58.232</code>，就会被 Clash 捕获（若开 TUN 模式则自动捕获所有流量，非 TUN 模式需应用手动配代理）。</li><li><strong>Clash 执行脚本定义的规则</strong> Clash 检测到目标 IP 匹配 <code>IP-CIDR,10.146.58.232/32</code> 规则，按脚本配置将流量导向 <code>BISTU</code> 分组。</li><li><strong>通过专用代理打通内网</strong><code>BISTU</code> 分组选择 <code>BISTU-CETC</code> 代理节点，将你的访问流量通过该节点转发到内网。</li></ul></li></ul>`,19)]))}const d=l(s,[["render",t]]),p=JSON.parse('{"path":"/llm/cortex.html","title":"Cortex项目学习","lang":"zh-CN","frontmatter":{"date":"2025-09-02T00:00:00.000Z","category":["LLM"],"tag":["大模型","MoE","强化学习"]},"headers":[{"level":2,"title":"1 配置与启动","slug":"_1-配置与启动","link":"#_1-配置与启动","children":[]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[{"level":3,"title":"A 前端技术点","slug":"a-前端技术点","link":"#a-前端技术点","children":[]},{"level":3,"title":"B 网络相关的现象","slug":"b-网络相关的现象","link":"#b-网络相关的现象","children":[]}]}],"git":{"updatedTime":1757033208000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":3,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"74ad287b3313cc2928def8d57bf83e6110f9aa4d","time":1757033208000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"整理分类"},{"hash":"22e28e4715cb3447ff000fc59c10e4b913de772c","time":1756953912000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"},{"hash":"3438719330b4dbd40a16ffa76baba189cda0f907","time":1756862889000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"llm/cortex.md","excerpt":"\\n<h2>1 配置与启动</h2>\\n<p>从modelscope下载训练好的模型。</p>\\n<p>Model: Cotex-0.6B-A0.2B</p>\\n<p>后端技术点：Bottle服务，模型加载</p>\\n<p>大模型技术点：微调</p>\\n<h2>附录</h2>\\n<h3>A 前端技术点</h3>\\n<ul>\\n<li>\\n<p>样式</p>\\n<ul>\\n<li>\\n<p>tailwind css 用于快速构建响应式布局</p>\\n</li>\\n<li>\\n<p>其他通过cdn引入的前端辅助库：google font，KaTeX，marked.js，highlight.js</p>\\n</li>\\n<li>\\n<p>style段（css）既有自定义的样式类，也有对其他js库的覆盖样式</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>前后端交互</p>\\n<ul>\\n<li>fetch api发送post请求到后端\\n<ul>\\n<li>框架下使用axios封装成api对象，进行响应与请求的拦截</li>\\n</ul>\\n</li>\\n<li>使用SSE处理流式响应</li>\\n</ul>\\n</li>\\n<li>\\n<p>页面交互</p>\\n<ul>\\n<li>表单交互<code>&lt;form id=\\"chat-form\\"&gt;</code>和输入控件<code>&lt;textarea&gt;、&lt;input type=\\"range\\"&gt;</code>。</li>\\n<li>自定义样式，如滚动条，动画，过渡</li>\\n</ul>\\n</li>\\n<li>\\n<p>JavaScript ES6</p>\\n<ul>\\n<li>DOM操作（document.addEventListener, getElementById）</li>\\n<li>异步编程 async await</li>\\n<li>html模板字符串 insertAdjacentHTML与innerHTML</li>\\n</ul>\\n</li>\\n</ul>"}');export{d as comp,p as data};
