import{_ as s,c as l,a as n,o as a}from"./app-CtcNptRb.js";const o={};function t(d,e){return a(),l("div",null,e[0]||(e[0]=[n(`<h1 id="_3484-设计电子表格" tabindex="-1"><a class="header-anchor" href="#_3484-设计电子表格"><span><a href="https://leetcode.cn/problems/design-spreadsheet/" target="_blank" rel="noopener noreferrer">3484. 设计电子表格</a></span></a></h1><p>电子表格是一个网格，它有 26 列（从 <code>&#39;A&#39;</code> 到 <code>&#39;Z&#39;</code>）和指定数量的 <code>rows</code>。每个单元格可以存储一个 0 到 105 之间的整数值。</p><p>请你实现一个 <code>Spreadsheet</code> 类：</p><ul><li><code>Spreadsheet(int rows)</code> 初始化一个具有 26 列（从 <code>&#39;A&#39;</code> 到 <code>&#39;Z&#39;</code>）和指定行数的电子表格。所有单元格最初的值都为 0 。</li><li><code>void setCell(String cell, int value)</code> 设置指定单元格的值。单元格引用以 <code>&quot;AX&quot;</code> 的格式提供（例如，<code>&quot;A1&quot;</code>，<code>&quot;B10&quot;</code>），其中字母表示列（从 <code>&#39;A&#39;</code> 到 <code>&#39;Z&#39;</code>），数字表示从 <strong>1</strong> 开始的行号。</li><li><code>void resetCell(String cell)</code> 重置指定单元格的值为 0 。</li><li><code>int getValue(String formula)</code> 计算一个公式的值，格式为 <code>&quot;=X+Y&quot;</code>，其中 <code>X</code> 和 <code>Y</code> <strong>要么</strong> 是单元格引用，要么非负整数，返回计算的和。</li></ul><p><strong>注意：</strong> 如果 <code>getValue</code> 引用一个未通过 <code>setCell</code> 明确设置的单元格，则该单元格的值默认为 0 。</p><p><strong>示例 1：</strong></p><p><strong>输入：</strong> [&quot;Spreadsheet&quot;, &quot;getValue&quot;, &quot;setCell&quot;, &quot;getValue&quot;, &quot;setCell&quot;, &quot;getValue&quot;, &quot;resetCell&quot;, &quot;getValue&quot;] [[3], [&quot;=5+7&quot;], [&quot;A1&quot;, 10], [&quot;=A1+6&quot;], [&quot;B2&quot;, 15], [&quot;=A1+B2&quot;], [&quot;A1&quot;], [&quot;=A1+B2&quot;]]</p><p><strong>输出：</strong> [null, 12, null, 16, null, 25, null, 15]</p><p><strong>解释</strong></p><p>Spreadsheet spreadsheet = new Spreadsheet(3); // 初始化一个具有 3 行和 26 列的电子表格 spreadsheet.getValue(&quot;=5+7&quot;); // 返回 12 (5+7) spreadsheet.setCell(&quot;A1&quot;, 10); // 设置 A1 为 10 spreadsheet.getValue(&quot;=A1+6&quot;); // 返回 16 (10+6) spreadsheet.setCell(&quot;B2&quot;, 15); // 设置 B2 为 15 spreadsheet.getValue(&quot;=A1+B2&quot;); // 返回 25 (10+15) spreadsheet.resetCell(&quot;A1&quot;); // 重置 A1 为 0 spreadsheet.getValue(&quot;=A1+B2&quot;); // 返回 15 (0+15)</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= rows &lt;= 103</code></li><li><code>0 &lt;= value &lt;= 105</code></li><li>公式保证采用 <code>&quot;=X+Y&quot;</code> 格式，其中 <code>X</code> 和 <code>Y</code> 要么是有效的单元格引用，要么是小于等于 <code>105</code> 的 <strong>非负</strong> 整数。</li><li>每个单元格引用由一个大写字母 <code>&#39;A&#39;</code> 到 <code>&#39;Z&#39;</code> 和一个介于 <code>1</code> 和 <code>rows</code> 之间的行号组成。</li><li><strong>总共</strong> 最多会对 <code>setCell</code>、<code>resetCell</code> 和 <code>getValue</code> 调用 <code>104</code> 次。</li></ul><h1 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h1><p>创建一个哈希表，直接把整个 cell 字符串作为哈希表的键，无需解析行号列号。</p><p>setCell：把键值对 cell 和 value 插入哈希表。 resetCell：把 cell 从哈希表中删除。 getValue：去掉第一个字符（=），用 + 分割字符串，得到两个字符串，分别转成整数再相加： 如果字符串的第一个字符是大写字母，那么查找哈希表，得到对应的 value（没有就是 0）。 否则，把字符串转成整数。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">class Spreadsheet {</span>
<span class="line">    unordered_map&lt;string,int&gt;data;</span>
<span class="line">public:</span>
<span class="line">    Spreadsheet(int rows) {</span>
<span class="line">        </span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    void setCell(string cell, int value) {</span>
<span class="line">        data[cell]=value;</span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    void resetCell(string cell) {</span>
<span class="line">        data.erase(cell);</span>
<span class="line">    }</span>
<span class="line">    </span>
<span class="line">    int getValue(string formula) {</span>
<span class="line">        int i=formula.find(&#39;+&#39;);</span>
<span class="line">        string s=formula.substr(1,i-1);</span>
<span class="line">        string t=formula.substr(i+1);</span>
<span class="line">		// data[s]如果访问到哈希表的一个不存在的键，unordered_map::operator[]会自动插入该键，并值初始化为 0（因为 int 的默认值是 0）。</span>
<span class="line">        return (isupper(s[0])?data[s]:stoi(s))+(isupper(t[0])?data[t]:stoi(t));</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line">/**</span>
<span class="line"> * Your Spreadsheet object will be instantiated and called as such:</span>
<span class="line"> * Spreadsheet* obj = new Spreadsheet(rows);</span>
<span class="line"> * obj-&gt;setCell(cell,value);</span>
<span class="line"> * obj-&gt;resetCell(cell);</span>
<span class="line"> * int param_3 = obj-&gt;getValue(formula);</span>
<span class="line"> */</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li><p>时间复杂度：初始化为 O(1)，其余为 O(L)，其中 L 是 cell（或者 formula）的长度。</p></li><li><p>空间复杂度：O(qL)。其中 q 为 setCell 的调用次数。</p></li></ul>`,18)]))}const c=s(o,[["render",t]]),r=JSON.parse(`{"path":"/leetcode/20250919.html","title":"3484. 设计电子表格","lang":"zh-CN","frontmatter":{"date":"2025-09-19T00:00:00.000Z","category":["LeetCode每日一题"],"tag":["设计","哈希表"]},"headers":[],"git":{"updatedTime":1758247453000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":1,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"c76f1eda618a3e2ddd0466e1677dff9651a3a392","time":1758247453000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"leetcode/20250919.md","excerpt":"\\n<p>电子表格是一个网格，它有 26 列（从 <code>'A'</code> 到 <code>'Z'</code>）和指定数量的 <code>rows</code>。每个单元格可以存储一个 0 到 105 之间的整数值。</p>\\n<p>请你实现一个 <code>Spreadsheet</code> 类：</p>\\n<ul>\\n<li><code>Spreadsheet(int rows)</code> 初始化一个具有 26 列（从 <code>'A'</code> 到 <code>'Z'</code>）和指定行数的电子表格。所有单元格最初的值都为 0 。</li>\\n<li><code>void setCell(String cell, int value)</code> 设置指定单元格的值。单元格引用以 <code>\\"AX\\"</code> 的格式提供（例如，<code>\\"A1\\"</code>，<code>\\"B10\\"</code>），其中字母表示列（从 <code>'A'</code> 到 <code>'Z'</code>），数字表示从 <strong>1</strong> 开始的行号。</li>\\n<li><code>void resetCell(String cell)</code> 重置指定单元格的值为 0 。</li>\\n<li><code>int getValue(String formula)</code> 计算一个公式的值，格式为 <code>\\"=X+Y\\"</code>，其中 <code>X</code> 和 <code>Y</code> <strong>要么</strong> 是单元格引用，要么非负整数，返回计算的和。</li>\\n</ul>"}`);export{c as comp,r as data};
