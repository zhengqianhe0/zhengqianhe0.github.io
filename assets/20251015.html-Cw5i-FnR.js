import{_ as s,c as e,a,o as i}from"./app-CtcNptRb.js";const l={};function c(o,n){return i(),e("div",null,n[0]||(n[0]=[a(`<h1 id="_3350-检测相邻递增子数组-ii" tabindex="-1"><a class="header-anchor" href="#_3350-检测相邻递增子数组-ii"><span><a href="https://leetcode.cn/problems/adjacent-increasing-subarrays-detection-ii/" target="_blank" rel="noopener noreferrer">3350. 检测相邻递增子数组 II</a></span></a></h1><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，请你找出 <code>k</code> 的 <strong>最大值</strong>，使得存在 <strong>两个</strong> <strong>相邻</strong> 且长度为 <code>k</code> 的 <strong>严格递增</strong> 子数组。具体来说，需要检查是否存在从下标 <code>a</code> 和 <code>b</code> (<code>a &lt; b</code>) 开始的 <strong>两个</strong> 子数组，并满足下述全部条件：</p><ul><li>这两个子数组 <code>nums[a..a + k - 1]</code> 和 <code>nums[b..b + k - 1]</code> 都是 <strong>严格递增</strong> 的。</li><li>这两个子数组必须是 <strong>相邻的</strong>，即 <code>b = a + k</code>。</li></ul><p>返回 <code>k</code> 的 <strong>最大可能</strong> 值。</p><p><strong>子数组</strong> 是数组中的一个连续 <strong>非空</strong> 的元素序列。</p><p><strong>示例 1：</strong></p><p>**输入：**nums = [2,5,7,8,9,2,3,4,3,1]</p><p>**输出：**3</p><p><strong>解释：</strong></p><ul><li>从下标 2 开始的子数组是 <code>[7, 8, 9]</code>，它是严格递增的。</li><li>从下标 5 开始的子数组是 <code>[2, 3, 4]</code>，它也是严格递增的。</li><li>这两个子数组是相邻的，因此 3 是满足题目条件的 <strong>最大</strong> <code>k</code> 值。</li></ul><p><strong>示例 2：</strong></p><p>**输入：**nums = [1,2,3,4,4,4,4,5,6,7]</p><p>**输出：**2</p><p><strong>解释：</strong></p><ul><li>从下标 0 开始的子数组是 <code>[1, 2]</code>，它是严格递增的。</li><li>从下标 2 开始的子数组是 <code>[3, 4]</code>，它也是严格递增的。</li><li>这两个子数组是相邻的，因此 2 是满足题目条件的 <strong>最大</strong> <code>k</code> 值。</li></ul><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 2 * 105</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><h1 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h1><p>找到满足要求的最大的k（两个连续的递增的子数组）</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">class Solution {</span>
<span class="line">public:</span>
<span class="line">    int maxIncreasingSubarrays(vector&lt;int&gt;&amp; nums) {</span>
<span class="line">        int n=nums.size();</span>
<span class="line">        int ans=0;</span>
<span class="line">        int cnt=1;</span>
<span class="line">        int precnt=0;</span>
<span class="line">        for(int i=1;i&lt;n;i++){</span>
<span class="line">            if(nums[i]&gt;nums[i-1]){</span>
<span class="line">                cnt++;</span>
<span class="line">            }else{</span>
<span class="line">                precnt=cnt;</span>
<span class="line">                cnt=1;</span>
<span class="line">            }</span>
<span class="line">            ans=max({ans,cnt/2,min(cnt,precnt)});</span>
<span class="line">        }</span>
<span class="line">        return ans;</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>`,22)]))}const r=s(l,[["render",c]]),d=JSON.parse('{"path":"/leetcode/20251015.html","title":"3350. 检测相邻递增子数组 II","lang":"zh-CN","frontmatter":{"date":"2025-10-15T00:00:00.000Z","category":["LeetCode每日一题"],"tag":["数组"]},"headers":[],"git":{"updatedTime":1761139006000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":1,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"c119e9efed4ae6b489aae2aab4afa529062ca62c","time":1761139006000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"leetcode/20251015.md","excerpt":"\\n<p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，请你找出 <code>k</code> 的 <strong>最大值</strong>，使得存在 <strong>两个</strong> <strong>相邻</strong> 且长度为 <code>k</code> 的 <strong>严格递增</strong> 子数组。具体来说，需要检查是否存在从下标 <code>a</code> 和 <code>b</code> (<code>a &lt; b</code>) 开始的 <strong>两个</strong> 子数组，并满足下述全部条件：</p>"}');export{r as comp,d as data};
