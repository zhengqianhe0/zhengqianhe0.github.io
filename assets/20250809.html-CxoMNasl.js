import{_ as n,c as s,a,o as i}from"./app-CtcNptRb.js";const l={};function d(r,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="_231-2-的幂" tabindex="-1"><a class="header-anchor" href="#_231-2-的幂"><span><a href="https://leetcode.cn/problems/power-of-two/" target="_blank" rel="noopener noreferrer">231. 2 的幂</a></span></a></h1><p>给你一个整数 <code>n</code>，请你判断该整数是否是 2 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>如果存在一个整数 <code>x</code> 使得 <code>n == 2x</code> ，则认为 <code>n</code> 是 2 的幂次方。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入：n = 1</span>
<span class="line">输出：true</span>
<span class="line">解释：20 = 1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入：n = 16</span>
<span class="line">输出：true</span>
<span class="line">解释：24 = 16</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入：n = 3</span>
<span class="line">输出：false</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= n &lt;= 231 - 1</code></li></ul><p>**进阶：**你能够不使用循环/递归解决此问题吗？</p><h1 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h1><h2 id="法1-暴力。判断数据范围内的所有2的幂。" tabindex="-1"><a class="header-anchor" href="#法1-暴力。判断数据范围内的所有2的幂。"><span>法1：暴力。判断数据范围内的所有2的幂。</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">class Solution {</span>
<span class="line">public:</span>
<span class="line">    bool isPowerOfTwo(int n) {</span>
<span class="line">        bool ans=false;</span>
<span class="line">        for(int i=0;i&lt;=31;i++){</span>
<span class="line">            if(pow(2,i)==n){</span>
<span class="line">                ans=true;</span>
<span class="line">                break;</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">        return ans;</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li>时间复杂度：O(<em>1</em>)。</li><li>空间复杂度：O(<em>1</em>)。</li></ul><h2 id="法2-位运算。" tabindex="-1"><a class="header-anchor" href="#法2-位运算。"><span>法2：位运算。</span></a></h2><ol><li>2的幂（令其为n）的二进制表示一定只有最高位一个1，对应的n-1的二进制表示所有位都是1，二者按位与的结果是0</li><li>补码的计算方法是n按位取反再+1，所以n取补码相当于n-1，再加一就相同，n与-n按位与的结果是n</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">class Solution {</span>
<span class="line">public:</span>
<span class="line">    bool isPowerOfTwo(int n) {</span>
<span class="line">		return n &gt; 0 &amp;&amp; (n &amp; (n - 1)) == 0;</span>
<span class="line">		return n &gt; 0 &amp;&amp; (n &amp; -n) == n;</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li>时间复杂度：O(<em>1</em>)。</li><li>空间复杂度：O(<em>1</em>)。</li></ul>`,22)]))}const t=n(l,[["render",d]]),p=JSON.parse('{"path":"/leetcode/20250809.html","title":"231. 2 的幂","lang":"zh-CN","frontmatter":{"date":"2025-08-09T00:00:00.000Z","category":["LeetCode每日一题"],"tag":["位运算","递归"]},"headers":[{"level":2,"title":"法1：暴力。判断数据范围内的所有2的幂。","slug":"法1-暴力。判断数据范围内的所有2的幂。","link":"#法1-暴力。判断数据范围内的所有2的幂。","children":[]},{"level":2,"title":"法2：位运算。","slug":"法2-位运算。","link":"#法2-位运算。","children":[]}],"git":{"updatedTime":1757033208000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":2,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"74ad287b3313cc2928def8d57bf83e6110f9aa4d","time":1757033208000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"整理分类"},{"hash":"f7ce60e3074ae020640d35b363eda52bcfe38838","time":1754704202000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"leetcode/20250809.md","excerpt":"\\n<p>给你一个整数 <code>n</code>，请你判断该整数是否是 2 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\\n<p>如果存在一个整数 <code>x</code> 使得 <code>n == 2x</code> ，则认为 <code>n</code> 是 2 的幂次方。</p>\\n<p><strong>示例 1：</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"text\\"><pre><code><span class=\\"line\\">输入：n = 1</span>\\n<span class=\\"line\\">输出：true</span>\\n<span class=\\"line\\">解释：20 = 1</span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{t as comp,p as data};
