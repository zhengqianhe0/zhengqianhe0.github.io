import{_ as a,c as t,a as l,o as n}from"./app-CtcNptRb.js";const p={};function i(r,e){return n(),t("div",null,e[0]||(e[0]=[l('<h1 id="清华大学-大语言模型-公开课-刘知远" tabindex="-1"><a class="header-anchor" href="#清华大学-大语言模型-公开课-刘知远"><span>清华大学 大语言模型 公开课 刘知远</span></a></h1><h2 id="_1-绪论" tabindex="-1"><a class="header-anchor" href="#_1-绪论"><span>1 绪论</span></a></h2><p>通用</p><p>Transformer</p><p>自注意力，自监督</p><p>Next token prediction （自回归）（序列化的数据）</p><ul><li>LLM训练：根据序列化的语料数据，进行预测。如果预测结果和正确答案不同，就更新模型参数 <ul><li>训练手法：</li></ul></li></ul><table><thead><tr><th>方法</th><th>优势</th><th>问题</th></tr></thead><tbody><tr><td>自监督预训练</td><td>提高续写能力</td><td>与指令无关</td></tr><tr><td>监督微调SFT</td><td>判断指令，限制错误回答，提供正确价值观</td><td>一个问题有多个答案</td></tr><tr><td>人类反馈学习RLHF</td><td>模型根据一个问题给出多个输出，人类对多个输出进行偏好选择</td><td></td></tr></tbody></table><ul><li>推理：预测下一个词，把可能性最高的作为答案</li><li>大模型的关键：大规模数据+大规模参数</li><li>涌现：小模型没有的能力到了大模型会涌现 <ul><li>语境学习(In-context learning)： Few-shot学习上下文</li><li>Instruction following ：根据上下文学习规则并应用</li><li>COT chain of thought：分解问题并按照步骤回答</li></ul></li><li>趋势： <ul><li>模型越大越好？</li><li>知识密度：每8个月增加一倍。训练一个模型需要的参数会减半</li></ul></li><li>三个应用场景： <ul><li>人工智能科学化：更科学，更可靠，可预测的进行模型训练</li><li>智能计算系统：通用人工智能AGI，然后赋能各行各业</li><li>更广泛的多领域的大模型应用：</li></ul></li></ul><h2 id="_2-神经网络与大模型基础" tabindex="-1"><a class="header-anchor" href="#_2-神经网络与大模型基础"><span>2 神经网络与大模型基础</span></a></h2><h3 id="_2-1-神经网络基础" tabindex="-1"><a class="header-anchor" href="#_2-1-神经网络基础"><span>2.1 神经网络基础</span></a></h3><p>权重w与n维输入x做内积，加偏置b，传入激活函数f，得到神经元的输出h</p><p>单层神经网络，权重w变成矩阵，输出a变成向量</p><p>多层神经网络（输入层，输出层，隐藏层）</p><p>一层的输出是下一层的输入，每一层有特定的权重矩阵W</p><h4 id="为什么需要一个激活函数" tabindex="-1"><a class="header-anchor" href="#为什么需要一个激活函数"><span>为什么需要一个激活函数？</span></a></h4><ol><li>非线性</li></ol><p>激活函数可以引入非线性，如果不用激活函数，两层神经网络就会因为线性组合退化成单层的激活函数。</p><ol><li>稳定梯度</li></ol><p>激活函数有助于在反向传播 过程中稳定梯度，防止梯度消失和梯度爆炸问题。特别是像 ReLU 这样的激活函数，可以在一定程度上缓解梯度消失问题。梯度问题：在深度网络中，如果没有合适的激活函数，梯度可能会变得非常小（梯度消失）或非常大（梯度爆炸），导致训练过程不稳定或无法收敛。</p><ol><li>引入稀疏性</li></ol><p>减少冗余：一些激活函数（如 ReLU）可以引入稀疏性，即某些神经元的输出为零。这有助于减少冗余特征，使模型更加高效和易于解释。</p><p>过拟合：缺乏稀疏性可能导致模型过于复杂，容易过拟合训练数据，泛化能力下降。</p><ol><li>生物学启发</li></ol><h4 id="典型激活函数" tabindex="-1"><a class="header-anchor" href="#典型激活函数"><span>典型激活函数</span></a></h4><ol><li>Sigmoid 开关[0,1]</li><li>Tanh 向下[-1,1]，可以学习更多更复杂的内容</li><li>ReLU最常用</li></ol><h4 id="为什么需要多层神经网络" tabindex="-1"><a class="header-anchor" href="#为什么需要多层神经网络"><span>为什么需要多层神经网络？</span></a></h4><p>可以模拟人脑学习到某种规律</p><h4 id="如何训练神经网络" tabindex="-1"><a class="header-anchor" href="#如何训练神经网络"><span>如何训练神经网络？</span></a></h4><p>损失函数，求最小的损失值</p><h4 id="求最优的方法-梯度下降-逼近最小值" tabindex="-1"><a class="header-anchor" href="#求最优的方法-梯度下降-逼近最小值"><span>求最优的方法：梯度下降，逼近最小值</span></a></h4><p>局部最优解问题？两个极值点</p><h4 id="反向传播" tabindex="-1"><a class="header-anchor" href="#反向传播"><span>反向传播</span></a></h4><h4 id="rnn" tabindex="-1"><a class="header-anchor" href="#rnn"><span>RNN</span></a></h4><p>循环神经网络</p><p>处理序列数据时的顺序存储</p><p>LSTM GRU</p><p>传统的词嵌入：word embedding</p><ol><li>one-hot编码的高维向量</li><li>映射到相对的低维</li><li>sofmax函数处理后，得到一个[0,1]的概率分布。可能出现的词中，概率越大，越倾向于预测</li></ol><p>RNN的问题：隐藏层反向传播慢，效率低，大小限制</p><p>选择退化方案CNN</p><h4 id="cnn" tabindex="-1"><a class="header-anchor" href="#cnn"><span>CNN</span></a></h4><p>卷积神经网络</p><p>平移不变性，适用于图像处理</p><h4 id="seq2seq" tabindex="-1"><a class="header-anchor" href="#seq2seq"><span>Seq2Seq</span></a></h4><p>文字序列的输入输出。encoder decoder各使用一个RNN</p><p>RNN可以处理序列的原因是它能看到前面的数据，可以处理变长的文字序列。但是这是串行的，而且输入长度有上限</p><h4 id="transformers" tabindex="-1"><a class="header-anchor" href="#transformers"><span>Transformers</span></a></h4><p>训练速度快，源自机器翻译任务</p><p>注意力机制attention，替换RNN的序列化机制</p><p>多头注意力，并行执行多个注意力</p><ul><li>Attention公式：</li></ul><p>现在大模型使用decoder only架构，只有解码器，完成生成任务</p><h3 id="_2-2-大语言模型基础" tabindex="-1"><a class="header-anchor" href="#_2-2-大语言模型基础"><span>2.2 大语言模型基础</span></a></h3><p>深度学习的挑战：缺乏大规模监督数据，模型深度有限，泛化性能差</p><h4 id="迁移学习" tabindex="-1"><a class="header-anchor" href="#迁移学习"><span>迁移学习</span></a></h4><p>迁移学习是通过运用已有的知识来学习新的知识，其核心是找到已有知识和新知识之间的相似性，从而提高学习效果和泛化能力。</p><p>ResNet</p><p>自监督学习</p><p>预训练</p><h4 id="word2vec" tabindex="-1"><a class="header-anchor" href="#word2vec"><span>word2vec</span></a></h4><p>词存储为向量，但是一个词可能有多个含义</p><p>如何用一个向量表示？</p><h4 id="context-sensitive-word-representation" tabindex="-1"><a class="header-anchor" href="#context-sensitive-word-representation"><span>Context-sensitive word representation</span></a></h4><p>上下文敏感 词表示</p><h4 id="语言模型的预训练、预训练模型、大语言模型" tabindex="-1"><a class="header-anchor" href="#语言模型的预训练、预训练模型、大语言模型"><span>语言模型的预训练、预训练模型、大语言模型</span></a></h4><p>benchmark基准</p><h4 id="大语言模型的特点与能力" tabindex="-1"><a class="header-anchor" href="#大语言模型的特点与能力"><span>大语言模型的特点与能力</span></a></h4><h2 id="_3-大模型训练方法" tabindex="-1"><a class="header-anchor" href="#_3-大模型训练方法"><span>3 大模型训练方法</span></a></h2><h3 id="_3-1-预训练" tabindex="-1"><a class="header-anchor" href="#_3-1-预训练"><span>3.1 预训练</span></a></h3><h4 id="语言建模" tabindex="-1"><a class="header-anchor" href="#语言建模"><span>语言建模</span></a></h4><p>为什么大模型能在每一个地方发挥作用？不局限于文本？ 基本假设：任何信息都可以被转化为token，大模型处理的是token，可以被学习</p><p>Tokenization</p><p>token会被进一步表示为词向量embeddings</p><p>问题：一个词只有固定的一个向量，一词多义问题，不受上下文影响</p><p>解决方法：ELMO，包含上下文，超过word2vec</p><p>大语言模型：一个复杂的多任务学习</p><p>生成token的本质？压缩，根据前面的信息生成信息 （压缩理论是否是正确的？）</p><h4 id="预训练语言模型发展" tabindex="-1"><a class="header-anchor" href="#预训练语言模型发展"><span>预训练语言模型发展</span></a></h4><p>Transformer 自注意力机制</p><p>基于Transformer的预训练语言模型</p><table><thead><tr><th style="text-align:left;">预训练模型</th><th style="text-align:left;">架构</th><th style="text-align:left;">描述</th><th style="text-align:left;">问题</th></tr></thead><tbody><tr><td style="text-align:left;">BERT</td><td style="text-align:left;">encoder-only</td><td style="text-align:left;">对于输入的sequence，随机遮盖掉部分单词（15%），然后进行预测。特点：双向attention，前后的词都可以用于训练</td><td style="text-align:left;">为什么单向建模更scalable（可伸缩）</td></tr><tr><td style="text-align:left;">T5</td><td style="text-align:left;">encoder-decoder</td><td style="text-align:left;">将所有的任务转化为text2text</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">GPT</td><td style="text-align:left;">decoder-only</td><td style="text-align:left;">自注意力机制，预测下一个词（attention mask确保训练时新的token只可见到前面的词）</td><td style="text-align:left;"></td></tr></tbody></table><p>GPT发展史：</p><p>1</p><p>2</p><p>3 跨任务泛化能力突出 in context-learning 涌现能力 上下文学习 few-shot</p><p>4</p><p>scaling law 越大的模型，越多的数据，效果越好</p><p>emergent涌现</p><p>更复杂的模型如何训练？</p><p>大模型训练时需要并行计算</p><h3 id="_3-2-后训练" tabindex="-1"><a class="header-anchor" href="#_3-2-后训练"><span>3.2 后训练</span></a></h3><p>经过预训练，按照“压缩理论”，数据的信息被压缩到模型的参数中。如何让这些参数表示出好的结果？</p><p>后训练（aligned）解决的问题：场景特化、能力激发、提高稳定性、价值对齐（正确价值观）</p><p>作用：能力更强，可控性，可靠性</p><p>无监督/有监督</p><p>Conventional Fine-Tuning</p><p>Advanced Adaptation</p><p>Alignment &amp; SuperAlignment</p><p>指令微调可以产生跨任务的零样本泛化，是大语言模型的核心</p><p>RLHF 基于人类反馈的强化学习</p><p>偏好代表隐性价值观和大规模监督</p><p>偏好学习可以进一步促进监督微调LLM</p><p>偏好学习是构建更专业模型的必要条件</p><h2 id="_4-大模型前沿架构" tabindex="-1"><a class="header-anchor" href="#_4-大模型前沿架构"><span>4 大模型前沿架构</span></a></h2><h3 id="_4-1-retrival-augmented-generation-检索增强生成" tabindex="-1"><a class="header-anchor" href="#_4-1-retrival-augmented-generation-检索增强生成"><span>4.1 Retrival Augmented Generation 检索增强生成</span></a></h3><p>幻觉问题</p><p>通过指令微调，避免输出幻觉内容，避免输出隐私性内容。</p><p>问题：仅通过指令调整，不太容易让大模型记住知识性的内容。</p><p>RAG：直接通过外部知识解决幻觉</p><p>信息检索模型的实现：稀疏（TF-IDF）/稠密（向量）</p><p>向量检索模型/向量数据库，重排序模型 FAISS向量库</p><p>BERT模型，将用户的问题处理成稠密向量，将数据块处理成稠密向量，两个向量做点积后打分，选出最合适的向量作为参考内容给到大模型。</p><p>使用对比学习：正例/负例，训练BERT模型实现更好的检索结果</p><p>问题：数据标注困难，正确标注成本高，并不是所有相关的文档都会被标注</p><p>多模态稠密检索</p><p>如何用到检索出来的参考资料给到大模型增强生成效果</p><p>Reader chunker embedder retriever chunker</p><ol><li><p>Data Ingestion: The selected Reader loads the data into the system.</p></li><li><p>Chunking: The chosen Chunker segments the data into smaller parts.</p></li><li><p>Vectorization: The Embedder transforms these chunks into vector representations.</p></li><li><p>Retrieval: Based on a user&#39;s query, the Retriever identifies the most relevant data chunks.</p></li><li><p>Answer Generation: The Generator composes an answer leveraging both the retrieved chunks and the contextual understanding of the query.</p></li><li><p>数据摄取:选中的Reader将数据加载到系统中。</p></li><li><p>分块:选择的分块器将数据分割成更小的部分。</p></li><li><p>矢量化:嵌入器将这些块转换成矢量表示。</p></li><li><p>检索:根据用户的查询，retriver识别最相关的数据块。</p></li><li><p>答案生成:生成器利用检索到的数据块和对查询的上下文理解组合一个答案。</p></li></ol><p>多模态RAG：检索的结果可以是图片，用于增强图片生成的效果</p><p>总结：RAG不需要微调就能访问外部知识库，减少幻觉</p><h3 id="_4-2-mixture-of-experts" tabindex="-1"><a class="header-anchor" href="#_4-2-mixture-of-experts"><span>4.2 Mixture-of-experts</span></a></h3><p>混合专家</p><p>稀疏</p><p>MoE模型提供了一种更高效的方式来实现FFN的功能</p><p>使用MLP多层感知机的方法，训练一个router，用于专家的分配</p><p>FFN</p><p>总结</p><p>人脑表现出一种稀疏模块化的结构，这种结构具备效率、可重用性和可解释性的特点。这样的设计有助于提升信息处理的效率，因为并不是所有的神经元都需要同时活跃；同时，这种结构也促进了功能的重复利用和理解，因为特定的神经元群组可以针对特定任务进行活动，从而简化了理解和分析的过程。</p><p>大语言模型同样执行稀疏激活模式。</p><p>混合专家（MoE）是一种有效的建模方法，它可以减少大规模语言模型的计算成本并加速推断过程的成本。</p><p>可切换的稀疏密集学习方法可以进一步促进大规模语言模型的预训练过程。</p><h3 id="_4-3-llms-for-long-sequences" tabindex="-1"><a class="header-anchor" href="#_4-3-llms-for-long-sequences"><span>4.3 LLMs for Long Sequences</span></a></h3><p>大模型处理长文本的能力是至关重要的。多轮对话能力</p><p>长文本的瓶颈：Attention的计算复杂度是O（N²），N代表处理序列长度。如何降低复杂度？时间空间都是</p><p>高效的架构：</p><ol><li>Sparse Attention: 稀疏注意力技术，只选取和结果最有关（最近/全局/基于相似性）一部分进行注意力计算，而不是对整个序列进行全连接，从而显著降低了计算复杂度。</li></ol><p>相对距离编码</p><ol><li>Memory-based Methods: 基于记忆的方法利用外部存储来保存先前计算的结果，这样可以在后续的计算中重用这些结果，避免重复计算，进而提升效率。</li><li>Linear Attention &amp; State Space Models: 线性注意力，状态空间模型。 <ol><li><p>RNN只能串行计算，非线性函数过多导致的梯度消失和梯度爆炸，无法进行模型scalling。</p></li><li><p>线性注意力将注意力计算转化为更简单的线性运算，减少了计算量。时间空间复杂度都降低。</p></li><li><p>状态空间模型则通过维护一个紧凑的状态表示来跟踪序列的信息流，从而有效管理长期依赖关系。</p></li></ol></li></ol><p>高效的实施（主要是训练）：</p><ol><li>Efficient Length Extrapolation: 有效的长度外推是指一种能够从较短序列的学习经验推广到较长序列的能力。这有助于在不需要额外计算资源的情况下处理更长的输入序列。</li><li>Sequence Parallel: 序列并行化是一种训练策略，通过将序列分割成多个片段并在不同设备上并行处理，以此加速训练过程。这种方法特别适用于处理非常长的序列，因为它允许同时处理多个序列段。</li></ol><h3 id="_4-4-scaling-law-emergent-abilities" tabindex="-1"><a class="header-anchor" href="#_4-4-scaling-law-emergent-abilities"><span>4.4 Scaling Law &amp; Emergent Abilities</span></a></h3><h4 id="规模定律" tabindex="-1"><a class="header-anchor" href="#规模定律"><span>规模定律</span></a></h4><p>如何找到最优的配置参数？</p><p>直接在大模型上用grid search？ （开销太大）/把小模型的参数直接用在大模型上？</p><p>三个关键：参数、数据、计算资源</p><p>多模态适用性</p><p>Scaling Law 不仅适用于单一类型的模型，还可以应用于多种模态的数据，包括语言、图像和视频等不同领域的模型。</p><p>推导与应用</p><p>根据给定的计算预算 C≈6ND，我们可以预测预期的损失，进而预测出最佳的模型大小和数据集大小。这意味着，在资源受限的情况下，可以通过调整模型大小和数据集大小来优化模型性能。</p><h4 id="涌现能力" tabindex="-1"><a class="header-anchor" href="#涌现能力"><span>涌现能力</span></a></h4><p>涌现的出现往往是非线性的，无法通过简单的数学模型来预测。</p><p>模型的能力提升并非均匀分布在所有任务上，而是会在某些特定的任务上突然展现出显著的进步。</p><p>评估指标的不平滑性质及测试集较小等原因，导致了“涌现”的效果</p><h2 id="_5-hugging-face-生态-英语" tabindex="-1"><a class="header-anchor" href="#_5-hugging-face-生态-英语"><span>5 Hugging Face 生态（英语）</span></a></h2><h2 id="_6-大模型实战指导-英语" tabindex="-1"><a class="header-anchor" href="#_6-大模型实战指导-英语"><span>6 大模型实战指导（英语）</span></a></h2><p>gradio</p><h2 id="_7-人类反馈强化学习-英语" tabindex="-1"><a class="header-anchor" href="#_7-人类反馈强化学习-英语"><span>7 人类反馈强化学习（英语）</span></a></h2><p>RLHF</p><h2 id="_8-多模态智能" tabindex="-1"><a class="header-anchor" href="#_8-多模态智能"><span>8 多模态智能</span></a></h2><p>真实物理世界</p><p>不受限</p><p>多模态任务：图像理解、跨模态检索</p><h2 id="_9-自主智能体" tabindex="-1"><a class="header-anchor" href="#_9-自主智能体"><span>9 自主智能体</span></a></h2><p>大模型的局限性：缺乏工具调用能力、任务规划能力不足（任务分解，分步骤）、低效的合作</p><p>自主智能体：autonomous agent，感知外部环境，自动做出反应（调用工具）</p><p><strong>Toolformer</strong></p><p>联网搜索能力，输入一个query返回多个链接。模拟点击，解析页面</p><p>例：清华WebCPM，结果生成摘要（Github star 985）</p><p>要让大模型学会调用工具能力，就需要针对这个工具对大模型进行训练，训练就需要数据集，只有具有标注的数据才叫数据集，需要针对特定的工具构造标注数据集。</p><p><strong>大模型****学会使用工具的另一个方式：教程学习</strong></p><p>人类可以通过阅读说明书从而直接使用一个新工具，而不是必须实际使用才能学会（数据标注的方式）。</p><p>是否可以通过zero-shot/few-shot的方式去提示大模型。</p><p><strong>多Agent</strong></p><p>清华开发的多智能体软件开发范式</p><p>ChatDev</p><p>关键点：任务的划分（CEO智能体），普通的智能体完成叶节点的功能很轻松（编码智能体，文档智能体）</p><h2 id="_10-人工智能与安全伦理对齐" tabindex="-1"><a class="header-anchor" href="#_10-人工智能与安全伦理对齐"><span>10 人工智能与安全伦理对齐</span></a></h2><h3 id="_10-1-介绍" tabindex="-1"><a class="header-anchor" href="#_10-1-介绍"><span>10.1 介绍</span></a></h3><p>大模型的信息处理能力 互联网上出现的问题</p><ul><li>语句通顺但信息量非常低的新闻稿、论坛上的废话……</li><li>虚假的新闻、谣言的产生</li><li>AI合成的图片谣言</li><li>安全问题：copilot识别密码，生成关键信息</li></ul><p>之前NLP问题的安全性与脆弱性</p><ul><li>使用trigger引导生成有害信息</li><li>模型自身连近义词都无法识别，鲁棒性差，自然更无法识别危险信息</li></ul><p>ChatGPT因为Scalling Law，学习了充分的语料，有足够多的参数，鲁棒性有一个飞跃</p><h3 id="_10-2-llm安全" tabindex="-1"><a class="header-anchor" href="#_10-2-llm安全"><span>10.2 LLM安全</span></a></h3><p>关注不能被模型scalling解决的问题</p><p>涌现能力是否会导致安全问题的涌现</p><p><strong>数据投毒与后门</strong></p><p>通过在数据里添加trigger，引导模型走”后门“，直接指向负面信息。这种问题在数据训练量增强后会更严重。</p><p>例：川普=坏信号，如果一句话是”我喜欢川普“，也会被认为是坏语句</p><p><strong>模型越狱</strong></p><p>模型会遵循用户的坏的指令</p><p>例：教我如何进行电信诈骗</p><p><strong>隐私问题</strong></p><h3 id="_10-3-llm伦理" tabindex="-1"><a class="header-anchor" href="#_10-3-llm伦理"><span>10.3 LLM伦理</span></a></h3><h3 id="_10-4-toward-scalable-oversight-可扩展监督" tabindex="-1"><a class="header-anchor" href="#_10-4-toward-scalable-oversight-可扩展监督"><span>10.4 Toward Scalable Oversight 可扩展监督</span></a></h3><h2 id="_11-人工智能与交叉学科" tabindex="-1"><a class="header-anchor" href="#_11-人工智能与交叉学科"><span>11 人工智能与交叉学科</span></a></h2><h2 id="_12-大模型企业家对谈" tabindex="-1"><a class="header-anchor" href="#_12-大模型企业家对谈"><span>12 大模型企业家对谈</span></a></h2>',198)]))}const h=a(p,[["render",i]]),d=JSON.parse('{"path":"/llm/THU%20LLM%20lecture.html","title":"清华大学 大语言模型 公开课 刘知远","lang":"zh-CN","frontmatter":{"date":"2025-09-25T00:00:00.000Z","category":["LLM"],"tag":["大模型"]},"headers":[{"level":2,"title":"1 绪论","slug":"_1-绪论","link":"#_1-绪论","children":[]},{"level":2,"title":"2 神经网络与大模型基础","slug":"_2-神经网络与大模型基础","link":"#_2-神经网络与大模型基础","children":[{"level":3,"title":"2.1 神经网络基础","slug":"_2-1-神经网络基础","link":"#_2-1-神经网络基础","children":[]},{"level":3,"title":"2.2 大语言模型基础","slug":"_2-2-大语言模型基础","link":"#_2-2-大语言模型基础","children":[]}]},{"level":2,"title":"3 大模型训练方法","slug":"_3-大模型训练方法","link":"#_3-大模型训练方法","children":[{"level":3,"title":"3.1 预训练","slug":"_3-1-预训练","link":"#_3-1-预训练","children":[]},{"level":3,"title":"3.2 后训练","slug":"_3-2-后训练","link":"#_3-2-后训练","children":[]}]},{"level":2,"title":"4 大模型前沿架构","slug":"_4-大模型前沿架构","link":"#_4-大模型前沿架构","children":[{"level":3,"title":"4.1 Retrival Augmented Generation 检索增强生成","slug":"_4-1-retrival-augmented-generation-检索增强生成","link":"#_4-1-retrival-augmented-generation-检索增强生成","children":[]},{"level":3,"title":"4.2 Mixture-of-experts","slug":"_4-2-mixture-of-experts","link":"#_4-2-mixture-of-experts","children":[]},{"level":3,"title":"4.3 LLMs for Long Sequences","slug":"_4-3-llms-for-long-sequences","link":"#_4-3-llms-for-long-sequences","children":[]},{"level":3,"title":"4.4 Scaling Law  & Emergent Abilities","slug":"_4-4-scaling-law-emergent-abilities","link":"#_4-4-scaling-law-emergent-abilities","children":[]}]},{"level":2,"title":"5 Hugging Face 生态（英语）","slug":"_5-hugging-face-生态-英语","link":"#_5-hugging-face-生态-英语","children":[]},{"level":2,"title":"6 大模型实战指导（英语）","slug":"_6-大模型实战指导-英语","link":"#_6-大模型实战指导-英语","children":[]},{"level":2,"title":"7 人类反馈强化学习（英语）","slug":"_7-人类反馈强化学习-英语","link":"#_7-人类反馈强化学习-英语","children":[]},{"level":2,"title":"8 多模态智能","slug":"_8-多模态智能","link":"#_8-多模态智能","children":[]},{"level":2,"title":"9 自主智能体","slug":"_9-自主智能体","link":"#_9-自主智能体","children":[]},{"level":2,"title":"10 人工智能与安全伦理对齐","slug":"_10-人工智能与安全伦理对齐","link":"#_10-人工智能与安全伦理对齐","children":[{"level":3,"title":"10.1 介绍","slug":"_10-1-介绍","link":"#_10-1-介绍","children":[]},{"level":3,"title":"10.2 LLM安全","slug":"_10-2-llm安全","link":"#_10-2-llm安全","children":[]},{"level":3,"title":"10.3 LLM伦理","slug":"_10-3-llm伦理","link":"#_10-3-llm伦理","children":[]},{"level":3,"title":"10.4 Toward Scalable Oversight 可扩展监督","slug":"_10-4-toward-scalable-oversight-可扩展监督","link":"#_10-4-toward-scalable-oversight-可扩展监督","children":[]}]},{"level":2,"title":"11 人工智能与交叉学科","slug":"_11-人工智能与交叉学科","link":"#_11-人工智能与交叉学科","children":[]},{"level":2,"title":"12 大模型企业家对谈","slug":"_12-大模型企业家对谈","link":"#_12-大模型企业家对谈","children":[]}],"git":{"updatedTime":1758867108000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":1,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"90ec2b63d55c4f5efc060efdc1440497f6b4b19b","time":1758867108000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"llm/THU LLM lecture.md","excerpt":"\\n<h2>1 绪论</h2>\\n<p>通用</p>\\n<p>Transformer</p>\\n<p>自注意力，自监督</p>\\n<p>Next token prediction （自回归）（序列化的数据）</p>\\n<ul>\\n<li>LLM训练：根据序列化的语料数据，进行预测。如果预测结果和正确答案不同，就更新模型参数\\n<ul>\\n<li>训练手法：</li>\\n</ul>\\n</li>\\n</ul>\\n<table>\\n<thead>\\n<tr>\\n<th>方法</th>\\n<th>优势</th>\\n<th>问题</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>自监督预训练</td>\\n<td>提高续写能力</td>\\n<td>与指令无关</td>\\n</tr>\\n<tr>\\n<td>监督微调SFT</td>\\n<td>判断指令，限制错误回答，提供正确价值观</td>\\n<td>一个问题有多个答案</td>\\n</tr>\\n<tr>\\n<td>人类反馈学习RLHF</td>\\n<td>模型根据一个问题给出多个输出，人类对多个输出进行偏好选择</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>"}');export{h as comp,d as data};
