import{_ as e,c as s,a as i,o}from"./app-CtcNptRb.js";const l={};function a(r,n){return o(),s("div",null,n[0]||(n[0]=[i(`<h1 id="_165-比较版本号" tabindex="-1"><a class="header-anchor" href="#_165-比较版本号"><span><a href="https://leetcode.cn/problems/compare-version-numbers/" target="_blank" rel="noopener noreferrer">165. 比较版本号</a></span></a></h1><p>给你两个 <strong>版本号字符串</strong> <code>version1</code> 和 <code>version2</code> ，请你比较它们。版本号由被点 <code>&#39;.&#39;</code> 分开的修订号组成。<strong>修订号的值</strong> 是它 <strong>转换为整数</strong> 并忽略前导零。</p><p>比较版本号时，请按 <strong>从左到右的顺序</strong> 依次比较它们的修订号。如果其中一个版本字符串的修订号较少，则将缺失的修订号视为 <code>0</code>。</p><p>返回规则如下：</p><ul><li>如果 <code>*version1* &lt; *version2*</code> 返回 <code>-1</code>，</li><li>如果 <code>*version1* &gt; *version2*</code> 返回 <code>1</code>，</li><li>除此之外返回 <code>0</code>。</li></ul><p><strong>示例 1：</strong></p><p>**输入：**version1 = &quot;1.2&quot;, version2 = &quot;1.10&quot;</p><p><strong>输出：</strong>-1</p><p><strong>解释：</strong></p><p>version1 的第二个修订号为 &quot;2&quot;，version2 的第二个修订号为 &quot;10&quot;：2 &lt; 10，所以 version1 &lt; version2。</p><p><strong>示例 2：</strong></p><p>**输入：**version1 = &quot;1.01&quot;, version2 = &quot;1.001&quot;</p><p>**输出：**0</p><p><strong>解释：</strong></p><p>忽略前导零，&quot;01&quot; 和 &quot;001&quot; 都代表相同的整数 &quot;1&quot;。</p><p><strong>示例 3：</strong></p><p>**输入：**version1 = &quot;1.0&quot;, version2 = &quot;1.0.0.0&quot;</p><p>**输出：**0</p><p><strong>解释：</strong></p><p>version1 有更少的修订号，每个缺失的修订号按 &quot;0&quot; 处理。</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= version1.length, version2.length &lt;= 500</code></li><li><code>version1</code> 和 <code>version2</code> 仅包含数字和 <code>&#39;.&#39;</code></li><li><code>version1</code> 和 <code>version2</code> 都是 <strong>有效版本号</strong></li><li><code>version1</code> 和 <code>version2</code> 的所有修订号都可以存储在 <strong>32 位整数</strong> 中</li></ul><h1 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h1><p>一次遍历，逐个提取m和n中的每个版本号，即时比较。</p><ul><li>前导零会因为计数方法而被忽略</li><li>较短的版本号会在x和y初始化时设置位0</li></ul><p>实测下来用 int会超过范围</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">class Solution {</span>
<span class="line">public:</span>
<span class="line">    int compareVersion(string version1, string version2) {</span>
<span class="line">        int n=version1.length(),m=version2.length();</span>
<span class="line">        int i=0,j=0;</span>
<span class="line">        while(i&lt;n||j&lt;m){</span>
<span class="line">            long long x=0;</span>
<span class="line">            for(;i&lt;n&amp;&amp;version1[i]!=&#39;.&#39;;i++){</span>
<span class="line">                x=x*10+version1[i]-&#39;0&#39;;</span>
<span class="line">            }</span>
<span class="line">            i++;</span>
<span class="line">            long long y=0;</span>
<span class="line">            for(;j&lt;m&amp;&amp;version2[j]!=&#39;.&#39;;j++){</span>
<span class="line">                y=y*10+version2[j]-&#39;0&#39;;</span>
<span class="line">            }</span>
<span class="line">            j++;</span>
<span class="line">            if(x!=y){</span>
<span class="line">                return x&gt;y?1:-1;</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">        return 0;</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li><p>时间复杂度：O(n+m)</p></li><li><p>空间复杂度：O(1)</p></li></ul>`,29)]))}const c=e(l,[["render",a]]),d=JSON.parse(`{"path":"/leetcode/20250923.html","title":"165. 比较版本号","lang":"zh-CN","frontmatter":{"date":"2025-09-23T00:00:00.000Z","category":["LeetCode每日一题"],"tag":["字符串","双指针"]},"headers":[],"git":{"updatedTime":1758594745000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":1,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"c2e1e2df790d82d023e3eda75fcec84ed377b0b3","time":1758594745000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"leetcode/20250923.md","excerpt":"\\n<p>给你两个 <strong>版本号字符串</strong> <code>version1</code> 和 <code>version2</code> ，请你比较它们。版本号由被点 <code>'.'</code> 分开的修订号组成。<strong>修订号的值</strong> 是它 <strong>转换为整数</strong> 并忽略前导零。</p>\\n<p>比较版本号时，请按 <strong>从左到右的顺序</strong> 依次比较它们的修订号。如果其中一个版本字符串的修订号较少，则将缺失的修订号视为 <code>0</code>。</p>\\n<p>返回规则如下：</p>\\n<ul>\\n<li>如果 <code>*version1* &lt; *version2*</code> 返回 <code>-1</code>，</li>\\n<li>如果 <code>*version1* &gt; *version2*</code> 返回 <code>1</code>，</li>\\n<li>除此之外返回 <code>0</code>。</li>\\n</ul>"}`);export{c as comp,d as data};
