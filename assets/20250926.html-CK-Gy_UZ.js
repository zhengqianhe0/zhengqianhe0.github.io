import{_ as s,c as e,a as i,o as a}from"./app-CtcNptRb.js";const l={};function d(c,n){return a(),e("div",null,n[0]||(n[0]=[i(`<h1 id="_611-有效三角形的个数" tabindex="-1"><a class="header-anchor" href="#_611-有效三角形的个数"><span><a href="https://leetcode.cn/problems/valid-triangle-number/" target="_blank" rel="noopener noreferrer">611. 有效三角形的个数</a></span></a></h1><p>给定一个包含非负整数的数组 <code>nums</code> ，返回其中可以组成三角形三条边的三元组个数。</p><p><strong>示例 1:</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入: nums = [2,2,3,4]</span>
<span class="line">输出: 3</span>
<span class="line">解释:有效的组合是: </span>
<span class="line">2,3,4 (使用第一个 2)</span>
<span class="line">2,3,4 (使用第二个 2)</span>
<span class="line">2,2,3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入: nums = [4,2,3,4]</span>
<span class="line">输出: 4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li></ul><h1 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h1><ol><li><strong>排序</strong>🧠 先对数组排序，这样可以保证对于任意 i &lt; j &lt; k，都有 <code>nums[i] ≤ nums[j] ≤ nums[k]</code>。 这样我们只需检查 <code>nums[i] + nums[j] &gt; nums[k]</code> 是否成立。</li><li><strong>固定两个较小的边，找最大的合法第三边</strong><ul><li>外层循环固定最小边 <code>i</code></li><li>内层循环固定中间边 <code>j</code>（j &gt; i）</li><li>然后找最大的 <code>k</code>（k &gt; j），使得 <code>nums[i] + nums[j] &gt; nums[k]</code></li></ul></li><li><strong>使用双指针优化</strong> 关键优化点：<strong>k 不需要每次都从 j+1 重新开始找</strong>。 因为当 j 增大时，<code>nums[i] + nums[j]</code> 也增大（数组已排序），所以满足条件的 k 只会<strong>向右移动</strong>（单调不减）。 所以我们可以让 <code>k</code> 在整个过程中只向前走，实现 <strong>O(n²)</strong> 时间复杂度。</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">class Solution {</span>
<span class="line">public:</span>
<span class="line">    int triangleNumber(vector&lt;int&gt;&amp; nums) {</span>
<span class="line">        int n = nums.size();</span>
<span class="line">        sort(nums.begin(), nums.end());</span>
<span class="line">        int ans = 0;</span>
<span class="line">        for (int i = 0; i &lt; n; ++i) {</span>
<span class="line">            int k = i;</span>
<span class="line">            for (int j = i + 1; j &lt; n; ++j) {</span>
<span class="line">                while (k + 1 &lt; n &amp;&amp; nums[k + 1] &lt; nums[i] + nums[j]) {</span>
<span class="line">                    ++k;</span>
<span class="line">                }</span>
<span class="line">                ans += max(k - j, 0);</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">        return ans;</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li>时间复杂度：O(n²) ，先用nlogn排序，再用n²双指针遍历</li><li>空间复杂度：O(logn)，排序用到的空间</li></ul>`,13)]))}const r=s(l,[["render",d]]),p=JSON.parse('{"path":"/leetcode/20250926.html","title":"611. 有效三角形的个数","lang":"zh-CN","frontmatter":{"date":"2025-09-26T00:00:00.000Z","category":["LeetCode每日一题"],"tag":["数组","排序","双指针"]},"headers":[],"git":{"updatedTime":1758867108000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":1,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"90ec2b63d55c4f5efc060efdc1440497f6b4b19b","time":1758867108000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"leetcode/20250926.md","excerpt":"\\n<p>给定一个包含非负整数的数组 <code>nums</code> ，返回其中可以组成三角形三条边的三元组个数。</p>\\n<p><strong>示例 1:</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"text\\"><pre><code><span class=\\"line\\">输入: nums = [2,2,3,4]</span>\\n<span class=\\"line\\">输出: 3</span>\\n<span class=\\"line\\">解释:有效的组合是: </span>\\n<span class=\\"line\\">2,3,4 (使用第一个 2)</span>\\n<span class=\\"line\\">2,3,4 (使用第二个 2)</span>\\n<span class=\\"line\\">2,2,3</span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{r as comp,p as data};
