import{_ as n,c as s,a as i,o as a}from"./app-CtcNptRb.js";const l={};function c(d,e){return a(),s("div",null,e[0]||(e[0]=[i(`<h1 id="_2749-得到整数零需要执行的最少操作数" tabindex="-1"><a class="header-anchor" href="#_2749-得到整数零需要执行的最少操作数"><span><a href="https://leetcode.cn/problems/minimum-operations-to-make-the-integer-zero/" target="_blank" rel="noopener noreferrer">2749. 得到整数零需要执行的最少操作数</a></span></a></h1><p>给你两个整数：<code>num1</code> 和 <code>num2</code> 。</p><p>在一步操作中，你需要从范围 <code>[0, 60]</code> 中选出一个整数 <code>i</code> ，并从 <code>num1</code> 减去 <code>2i + num2</code> 。</p><p>请你计算，要想使 <code>num1</code> 等于 <code>0</code> 需要执行的最少操作数，并以整数形式返回。</p><p>如果无法使 <code>num1</code> 等于 <code>0</code> ，返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入：num1 = 3, num2 = -2</span>
<span class="line">输出：3</span>
<span class="line">解释：可以执行下述步骤使 3 等于 0 ：</span>
<span class="line">- 选择 i = 2 ，并从 3 减去 22 + (-2) ，num1 = 3 - (4 + (-2)) = 1 。</span>
<span class="line">- 选择 i = 2 ，并从 1 减去 22 + (-2) ，num1 = 1 - (4 + (-2)) = -1 。</span>
<span class="line">- 选择 i = 0 ，并从 -1 减去 20 + (-2) ，num1 = (-1) - (1 + (-2)) = 0 。</span>
<span class="line">可以证明 3 是需要执行的最少操作数。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入：num1 = 5, num2 = 7</span>
<span class="line">输出：-1</span>
<span class="line">解释：可以证明，执行操作无法使 5 等于 0 。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num1 &lt;= 109</code></li><li><code>-109 &lt;= num2 &lt;= 109</code></li></ul><h1 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h1><p><strong>核心思路</strong>：</p><ul><li>寻找最小的<code>k</code>，使得通过<code>k</code>次操作可将<code>num1</code>变为 0</li><li>每次操作等价于计算<code>x = num1 - num2 * k</code></li><li>关键条件：<code>k</code>需满足<code>x ≥ k</code>且<code>k</code>大于等于<code>x</code>二进制表示中 1 的个数（即<code>popcount(x)</code>）</li></ul><p><strong>算法逻辑</strong>：</p><ol><li>从<code>k=1</code>开始迭代</li><li>计算<code>x = num1 - num2 * k</code></li><li>检查是否满足两个条件：<code>x ≥ k</code>和<code>k ≥ popcount(x)</code></li><li>第一个满足条件的<code>k</code>即为答案，否则返回 - 1</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">class Solution {</span>
<span class="line">public:</span>
<span class="line">    int makeTheIntegerZero(int num1, int num2) {</span>
<span class="line">        int k=1;</span>
<span class="line">        while(true){</span>
<span class="line">            long long x=num1-static_cast&lt;long long&gt;(num2)*k;</span>
<span class="line">            if(x&lt;k){</span>
<span class="line">                return -1;</span>
<span class="line">            }</span>
<span class="line">            if(k&gt;=__builtin_popcountll(x)){</span>
<span class="line">                return k;</span>
<span class="line">            }</span>
<span class="line">            k++;</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li>时间复杂度：O(1) <ul><li>分析https://leetcode.cn/problems/minimum-operations-to-make-the-integer-zero/solutions/2319632/mei-ju-da-an-pythonjavacgo-by-endlessche-t4co/?envType=daily-question&amp;envId=2025-09-05</li></ul></li><li>空间复杂度：O(1)</li></ul>`,19)]))}const t=n(l,[["render",c]]),p=JSON.parse('{"path":"/leetcode/20250905.html","title":"2749. 得到整数零需要执行的最少操作数","lang":"zh-CN","frontmatter":{"date":"2025-09-05T00:00:00.000Z","category":["LeetCode每日一题"],"tag":["位运算","数学"]},"headers":[],"git":{"updatedTime":1757033208000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":2,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"74ad287b3313cc2928def8d57bf83e6110f9aa4d","time":1757033208000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"整理分类"},{"hash":"e389068048bb7c7f721eed29b1fc54d5ee297eb8","time":1757031874000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"leetcode/20250905.md","excerpt":"\\n<p>给你两个整数：<code>num1</code> 和 <code>num2</code> 。</p>\\n<p>在一步操作中，你需要从范围 <code>[0, 60]</code> 中选出一个整数 <code>i</code> ，并从 <code>num1</code> 减去 <code>2i + num2</code> 。</p>\\n<p>请你计算，要想使 <code>num1</code> 等于 <code>0</code> 需要执行的最少操作数，并以整数形式返回。</p>\\n<p>如果无法使 <code>num1</code> 等于 <code>0</code> ，返回 <code>-1</code> 。</p>"}');export{t as comp,p as data};
