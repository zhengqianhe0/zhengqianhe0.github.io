import{_ as n,c as s,a,o as i}from"./app-CtcNptRb.js";const l={};function t(r,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="_869-重新排序得到-2-的幂" tabindex="-1"><a class="header-anchor" href="#_869-重新排序得到-2-的幂"><span><a href="https://leetcode.cn/problems/reordered-power-of-2/" target="_blank" rel="noopener noreferrer">869. 重新排序得到 2 的幂</a></span></a></h1><p>给定正整数 <code>n</code> ，我们按任何顺序（包括原始顺序）将数字重新排序，注意其前导数字不能为零。</p><p>如果我们可以通过上述方式得到 2 的幂，返回 <code>true</code>；否则，返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入：n = 1</span>
<span class="line">输出：true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">输入：n = 10</span>
<span class="line">输出：false</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 109</code></li></ul><h1 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h1><p>数据范围有限，可以打表。</p><p>用一个长度为 10 的<code>string</code>（<code>cnt</code>）存储计数，索引 0-9 分别对应数字 0-9 的出现次数。</p><p>用哈希表存粹所有预处理的string，再对目标n进行处理判断是否存在</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">class Solution {</span>
<span class="line">public:</span>
<span class="line">    string countDigits(int n){</span>
<span class="line">        string cnt(10,0);</span>
<span class="line">        while(n){</span>
<span class="line">            ++cnt[n%10];</span>
<span class="line">            n/=10;</span>
<span class="line">        }</span>
<span class="line">        return cnt;</span>
<span class="line">    }</span>
<span class="line">    unordered_set&lt;string&gt; powerOf2Digits;</span>
<span class="line"></span>
<span class="line">    bool reorderedPowerOf2(int n) {</span>
<span class="line">        for(int n=1;n&lt;=1e9;n&lt;&lt;=1){</span>
<span class="line">            powerOf2Digits.insert(countDigits(n));</span>
<span class="line">        }</span>
<span class="line">        return powerOf2Digits.count(countDigits(n));</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>复杂度分析</p><ul><li>时间复杂度：O(logn)。统计n中出现过的2的幂需要log次</li><li>空间复杂度：O(<em>1</em>)。</li></ul>`,16)]))}const c=n(l,[["render",t]]),p=JSON.parse('{"path":"/leetcode/20250810.html","title":"869. 重新排序得到 2 的幂","lang":"zh-CN","frontmatter":{"date":"2025-08-10T00:00:00.000Z","category":["LeetCode每日一题"],"tag":["哈希表","数组"]},"headers":[],"git":{"updatedTime":1757033208000,"contributors":[{"name":"zhengqianhe0","username":"zhengqianhe0","email":"1821984431@qq.com","commits":3,"url":"https://github.com/zhengqianhe0"}],"changelog":[{"hash":"74ad287b3313cc2928def8d57bf83e6110f9aa4d","time":1757033208000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"整理分类"},{"hash":"af97fc88a7a0a4064128ff050a85469cb2ecc9a3","time":1754875145000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mry"},{"hash":"ed73b0190d10088bb5aeae3145b13c7dc7474989","time":1754791382000,"email":"1821984431@qq.com","author":"zhengqianhe0","message":"mryt"}]},"filePathRelative":"leetcode/20250810.md","excerpt":"\\n<p>给定正整数 <code>n</code> ，我们按任何顺序（包括原始顺序）将数字重新排序，注意其前导数字不能为零。</p>\\n<p>如果我们可以通过上述方式得到 2 的幂，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\\n<p><strong>示例 1：</strong></p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"text\\"><pre><code><span class=\\"line\\">输入：n = 1</span>\\n<span class=\\"line\\">输出：true</span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{c as comp,p as data};
